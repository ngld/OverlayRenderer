import("//build/pkg_config.gni")

declare_args() {
  # Compile and link the vendored GLFW source instead of the system library.
  use_bundled_glfw = true

  # Compile and link the vendored JsonCpp source instead of the system library.
  use_bundled_jsoncpp = true
}

config("boost_public") {
  include_dirs = [
    "boost",
  ]

  defines = [
    "BOOST_USE_WINDOWS_H",
    "BOOST_DATE_TIME_NO_LIB",
  ]
}

group("boost") {
  public_configs = [ ":boost_public" ]
}

copy("cef_resources") {
  sources = [
    "cef/Release/natives_blob.bin",
    "cef/Release/snapshot_blob.bin",
    "cef/Release/v8_context_snapshot.bin",
    "cef/Resources/cef.pak",
    "cef/Resources/cef_100_percent.pak",
    "cef/Resources/cef_200_percent.pak",
    "cef/Resources/cef_extensions.pak",
    "cef/Resources/devtools_resources.pak",
    "cef/Resources/icudtl.dat",
    "cef/Resources/locales",
  ]

  if (is_win) {
    sources += [
      "cef/Release/chrome_elf.dll",
      "cef/Release/d3dcompiler_47.dll",
      "cef/Release/libcef.dll",
      "cef/Release/libEGL.dll",
      "cef/Release/libGLESv2.dll",
      "cef/Release/swiftshader",
    ]
  }

  outputs = [ "$root_out_dir/{{source_file_part}}" ]
}

config("cef_public") {
  include_dirs = [
    "cef"
  ]

  if (is_win) {
    libs = [
      "cef/Release/libcef.lib"
    ]
  }
}

source_set("cef") {
  _cmake_vars = exec_script("//tools/parse_cef_cmakelists.py", [], "json")

  sources = _cmake_vars.LIBCEF_SRCS
  sources += _cmake_vars.LIBCEF_BASE_SRCS
  sources += _cmake_vars.LIBCEF_CPPTOC_SRCS
  sources += _cmake_vars.LIBCEF_WRAPPER_SRCS

  # sources += _cmake_vars.LIBCEF_CPPTOC_VIEWS_SRCS
  sources += _cmake_vars.LIBCEF_CTOCPP_SRCS

  cflags = [
    "-Wno-undefined-var-template",
    "-DNOMINMAX",
    "-DWRAPPING_CEF_SHARED",
  ]

  public_deps = [ ":cef_resources" ]
  public_configs = [ ":cef_public" ]
}

config("glad_public") {
  include_dirs = [
    "glad/include"
  ]
}

source_set("glad") {
  sources = [
    "glad/src/glad.c"
  ]
  
  public_configs = [ ":glad_public" ]
}

if (use_bundled_glfw) {
  config("glfw_public") {
    include_dirs = [ "glfw/include" ]

    if (is_win) {
      defines = [ "_GLFW_WIN32" ]
    }

    if (is_linux) {
      defines = [ "_GLFW_X11" ]
    }
  }

  source_set("glfw") {
    sources = [
      "glfw/src/context.c",
      "glfw/src/init.c",
      "glfw/src/input.c",
      "glfw/src/monitor.c",
      "glfw/src/vulkan.c",
      "glfw/src/window.c",
    ]

    if (is_win) {
      sources += [
        "glfw/src/win32_init.c",
        "glfw/src/win32_joystick.c",
        "glfw/src/win32_monitor.c",
        "glfw/src/win32_time.c",
        "glfw/src/win32_thread.c",
        "glfw/src/win32_window.c",
        "glfw/src/wgl_context.c",
        "glfw/src/egl_context.c",
        "glfw/src/osmesa_context.c",
      ]
    } else if (is_linux) {
      sources += [
        "glfw/src/x11_init.c",
        "glfw/src/x11_monitor.c",
        "glfw/src/x11_window.c",
        "glfw/src/xkb_unicode.c",
        "glfw/src/posix_time.c",
        "glfw/src/posix_thread.c",
        "glfw/src/glx_context.c",
        "glfw/src/egl_context.c",
        "glfw/src/osmesa_context.c",
        "glfw/src/linux_joystick.c",
      ]

      libs += [
        "rt",
        "dl",
        "X11",
        "Xcursor",
        "Xinerama",
        "Xrandr",
      ]
    }

    cflags = []
    if (is_win) {
      cflags += [
        "-D_CRT_SECURE_NO_WARNINGS",
        "/wd4152",
      ]
    } else {
      cflags += [
        "-Wno-sign-compare",
        "-Wno-missing-field-initializers",
      ]
    }

    include_dirs = [ "include", "src" ]
    public_configs = [ ":glfw_public" ]
  }
} else {
  pkg_config_lib("glfw") {
    pkg = "glfw3"
  }
}

config("imgui_public") {
  include_dirs = [
    "imgui",
    "imgui/examples",
    "imgui/misc/cpp",
  ]
}

source_set("imgui") {
  sources = [
    "imgui/imgui.cpp",
    "imgui/imgui_demo.cpp",
    "imgui/imgui_draw.cpp",
    "imgui/imgui_widgets.cpp",
    "imgui/examples/imgui_impl_glfw.cpp",
    "imgui/examples/imgui_impl_opengl3.cpp",
    "imgui/misc/cpp/imgui_stdlib.cpp",
  ]

  cflags = [ "-DIMGUI_IMPL_OPENGL_LOADER_GLAD" ]

  public_configs = [ ":imgui_public" ]
  public_deps = [":glad" ]
  deps = [
    ":glfw",
  ]
}

if (use_bundled_jsoncpp) {
  config("jsoncpp_public") {
    include_dirs = [ "jsoncpp/include" ]
  }

  source_set("jsoncpp") {
    sources = [
      "jsoncpp/src/lib_json/json_reader.cpp",
      "jsoncpp/src/lib_json/json_value.cpp",
      "jsoncpp/src/lib_json/json_writer.cpp",
    ]

    cflags = [ "-Wno-deprecated-declarations" ]
    public_configs = [ ":jsoncpp_public" ]
  }
} else {
  pkg_config_lib("jsoncpp") {
    pkg = "jsoncpp"
  }
}

config("loguru_public") {
  include_dirs = [ "loguru" ]

  cflags = [ "-DLOGURU_REPLACE_GLOG" ]
}

source_set("loguru") {
  sources = [ "loguru/loguru.cpp" ]

  public_configs = [ ":loguru_public" ]
}

config("libprotobuf_public") {
  include_dirs = [
    "protobuf/src"
  ]
}

config("libprotobuf_private") {
  cflags = [ "-Wno-deprecated-declarations" ]

  # Always build this target with release configuration
  if (is_debug) {
    configs = [ "//build:release" ]
  }
}

source_set("libprotobuf_lite") {
  sources = [
    "protobuf/src/google/protobuf/any_lite.cc",
    "protobuf/src/google/protobuf/arena.cc",
    "protobuf/src/google/protobuf/extension_set.cc",
    "protobuf/src/google/protobuf/generated_enum_util.cc",
    "protobuf/src/google/protobuf/generated_message_table_driven_lite.cc",
    "protobuf/src/google/protobuf/generated_message_util.cc",
    "protobuf/src/google/protobuf/implicit_weak_message.cc",
    "protobuf/src/google/protobuf/io/coded_stream.cc",
    "protobuf/src/google/protobuf/io/io_win32.cc",
    "protobuf/src/google/protobuf/io/strtod.cc",
    "protobuf/src/google/protobuf/io/zero_copy_stream.cc",
    "protobuf/src/google/protobuf/io/zero_copy_stream_impl.cc",
    "protobuf/src/google/protobuf/io/zero_copy_stream_impl_lite.cc",
    "protobuf/src/google/protobuf/message_lite.cc",
    "protobuf/src/google/protobuf/parse_context.cc",
    "protobuf/src/google/protobuf/repeated_field.cc",
    "protobuf/src/google/protobuf/stubs/bytestream.cc",
    "protobuf/src/google/protobuf/stubs/common.cc",
    "protobuf/src/google/protobuf/stubs/int128.cc",
    "protobuf/src/google/protobuf/stubs/status.cc",
    "protobuf/src/google/protobuf/stubs/statusor.cc",
    "protobuf/src/google/protobuf/stubs/stringpiece.cc",
    "protobuf/src/google/protobuf/stubs/stringprintf.cc",
    "protobuf/src/google/protobuf/stubs/structurally_valid.cc",
    "protobuf/src/google/protobuf/stubs/strutil.cc",
    "protobuf/src/google/protobuf/stubs/time.cc",
    "protobuf/src/google/protobuf/wire_format_lite.cc",
  ]

  public_configs = [ ":libprotobuf_public" ]
  configs += [ ":libprotobuf_private" ]
}

source_set("libprotobuf") {
  sources = [
    "protobuf/src/google/protobuf/any.cc",
    "protobuf/src/google/protobuf/any.pb.cc",
    "protobuf/src/google/protobuf/api.pb.cc",
    "protobuf/src/google/protobuf/compiler/importer.cc",
    "protobuf/src/google/protobuf/compiler/parser.cc",
    "protobuf/src/google/protobuf/descriptor.cc",
    "protobuf/src/google/protobuf/descriptor.pb.cc",
    "protobuf/src/google/protobuf/descriptor_database.cc",
    "protobuf/src/google/protobuf/duration.pb.cc",
    "protobuf/src/google/protobuf/dynamic_message.cc",
    "protobuf/src/google/protobuf/empty.pb.cc",
    "protobuf/src/google/protobuf/extension_set_heavy.cc",
    "protobuf/src/google/protobuf/field_mask.pb.cc",
    "protobuf/src/google/protobuf/generated_message_reflection.cc",
    "protobuf/src/google/protobuf/generated_message_table_driven.cc",
    "protobuf/src/google/protobuf/io/gzip_stream.cc",
    "protobuf/src/google/protobuf/io/printer.cc",
    "protobuf/src/google/protobuf/io/tokenizer.cc",
    "protobuf/src/google/protobuf/map_field.cc",
    "protobuf/src/google/protobuf/message.cc",
    "protobuf/src/google/protobuf/reflection_ops.cc",
    "protobuf/src/google/protobuf/service.cc",
    "protobuf/src/google/protobuf/source_context.pb.cc",
    "protobuf/src/google/protobuf/struct.pb.cc",
    "protobuf/src/google/protobuf/stubs/mathlimits.cc",
    "protobuf/src/google/protobuf/stubs/substitute.cc",
    "protobuf/src/google/protobuf/text_format.cc",
    "protobuf/src/google/protobuf/timestamp.pb.cc",
    "protobuf/src/google/protobuf/type.pb.cc",
    "protobuf/src/google/protobuf/unknown_field_set.cc",
    "protobuf/src/google/protobuf/util/delimited_message_util.cc",
    "protobuf/src/google/protobuf/util/field_comparator.cc",
    "protobuf/src/google/protobuf/util/field_mask_util.cc",
    "protobuf/src/google/protobuf/util/internal/datapiece.cc",
    "protobuf/src/google/protobuf/util/internal/default_value_objectwriter.cc",
    "protobuf/src/google/protobuf/util/internal/error_listener.cc",
    "protobuf/src/google/protobuf/util/internal/field_mask_utility.cc",
    "protobuf/src/google/protobuf/util/internal/json_escaping.cc",
    "protobuf/src/google/protobuf/util/internal/json_objectwriter.cc",
    "protobuf/src/google/protobuf/util/internal/json_stream_parser.cc",
    "protobuf/src/google/protobuf/util/internal/object_writer.cc",
    "protobuf/src/google/protobuf/util/internal/proto_writer.cc",
    "protobuf/src/google/protobuf/util/internal/protostream_objectsource.cc",
    "protobuf/src/google/protobuf/util/internal/protostream_objectwriter.cc",
    "protobuf/src/google/protobuf/util/internal/type_info.cc",
    "protobuf/src/google/protobuf/util/internal/type_info_test_helper.cc",
    "protobuf/src/google/protobuf/util/internal/utility.cc",
    "protobuf/src/google/protobuf/util/json_util.cc",
    "protobuf/src/google/protobuf/util/message_differencer.cc",
    "protobuf/src/google/protobuf/util/time_util.cc",
    "protobuf/src/google/protobuf/util/type_resolver_util.cc",
    "protobuf/src/google/protobuf/wire_format.cc",
    "protobuf/src/google/protobuf/wrappers.pb.cc",
  ]

  configs += [ ":libprotobuf_private" ]
  public_deps = [ ":libprotobuf_lite" ]
}

source_set("libprotoc") {
  sources = [
    "protobuf/src/google/protobuf/compiler/code_generator.cc",
    "protobuf/src/google/protobuf/compiler/command_line_interface.cc",
    "protobuf/src/google/protobuf/compiler/cpp/cpp_enum.cc",
    "protobuf/src/google/protobuf/compiler/cpp/cpp_enum_field.cc",
    "protobuf/src/google/protobuf/compiler/cpp/cpp_extension.cc",
    "protobuf/src/google/protobuf/compiler/cpp/cpp_field.cc",
    "protobuf/src/google/protobuf/compiler/cpp/cpp_file.cc",
    "protobuf/src/google/protobuf/compiler/cpp/cpp_generator.cc",
    "protobuf/src/google/protobuf/compiler/cpp/cpp_helpers.cc",
    "protobuf/src/google/protobuf/compiler/cpp/cpp_map_field.cc",
    "protobuf/src/google/protobuf/compiler/cpp/cpp_message.cc",
    "protobuf/src/google/protobuf/compiler/cpp/cpp_message_field.cc",
    "protobuf/src/google/protobuf/compiler/cpp/cpp_padding_optimizer.cc",
    "protobuf/src/google/protobuf/compiler/cpp/cpp_primitive_field.cc",
    "protobuf/src/google/protobuf/compiler/cpp/cpp_service.cc",
    "protobuf/src/google/protobuf/compiler/cpp/cpp_string_field.cc",
    "protobuf/src/google/protobuf/compiler/csharp/csharp_doc_comment.cc",
    "protobuf/src/google/protobuf/compiler/csharp/csharp_enum.cc",
    "protobuf/src/google/protobuf/compiler/csharp/csharp_enum_field.cc",
    "protobuf/src/google/protobuf/compiler/csharp/csharp_field_base.cc",
    "protobuf/src/google/protobuf/compiler/csharp/csharp_generator.cc",
    "protobuf/src/google/protobuf/compiler/csharp/csharp_helpers.cc",
    "protobuf/src/google/protobuf/compiler/csharp/csharp_map_field.cc",
    "protobuf/src/google/protobuf/compiler/csharp/csharp_message.cc",
    "protobuf/src/google/protobuf/compiler/csharp/csharp_message_field.cc",
    "protobuf/src/google/protobuf/compiler/csharp/csharp_primitive_field.cc",
    "protobuf/src/google/protobuf/compiler/csharp/csharp_reflection_class.cc",
    "protobuf/src/google/protobuf/compiler/csharp/csharp_repeated_enum_field.cc",
    "protobuf/src/google/protobuf/compiler/csharp/csharp_repeated_message_field.cc",
    "protobuf/src/google/protobuf/compiler/csharp/csharp_repeated_primitive_field.cc",
    "protobuf/src/google/protobuf/compiler/csharp/csharp_source_generator_base.cc",
    "protobuf/src/google/protobuf/compiler/csharp/csharp_wrapper_field.cc",
    "protobuf/src/google/protobuf/compiler/java/java_context.cc",
    "protobuf/src/google/protobuf/compiler/java/java_doc_comment.cc",
    "protobuf/src/google/protobuf/compiler/java/java_enum.cc",
    "protobuf/src/google/protobuf/compiler/java/java_enum_field.cc",
    "protobuf/src/google/protobuf/compiler/java/java_enum_field_lite.cc",
    "protobuf/src/google/protobuf/compiler/java/java_enum_lite.cc",
    "protobuf/src/google/protobuf/compiler/java/java_extension.cc",
    "protobuf/src/google/protobuf/compiler/java/java_extension_lite.cc",
    "protobuf/src/google/protobuf/compiler/java/java_field.cc",
    "protobuf/src/google/protobuf/compiler/java/java_file.cc",
    "protobuf/src/google/protobuf/compiler/java/java_generator.cc",
    "protobuf/src/google/protobuf/compiler/java/java_generator_factory.cc",
    "protobuf/src/google/protobuf/compiler/java/java_helpers.cc",
    "protobuf/src/google/protobuf/compiler/java/java_map_field.cc",
    "protobuf/src/google/protobuf/compiler/java/java_map_field_lite.cc",
    "protobuf/src/google/protobuf/compiler/java/java_message.cc",
    "protobuf/src/google/protobuf/compiler/java/java_message_builder.cc",
    "protobuf/src/google/protobuf/compiler/java/java_message_builder_lite.cc",
    "protobuf/src/google/protobuf/compiler/java/java_message_field.cc",
    "protobuf/src/google/protobuf/compiler/java/java_message_field_lite.cc",
    "protobuf/src/google/protobuf/compiler/java/java_message_lite.cc",
    "protobuf/src/google/protobuf/compiler/java/java_name_resolver.cc",
    "protobuf/src/google/protobuf/compiler/java/java_primitive_field.cc",
    "protobuf/src/google/protobuf/compiler/java/java_primitive_field_lite.cc",
    "protobuf/src/google/protobuf/compiler/java/java_service.cc",
    "protobuf/src/google/protobuf/compiler/java/java_shared_code_generator.cc",
    "protobuf/src/google/protobuf/compiler/java/java_string_field.cc",
    "protobuf/src/google/protobuf/compiler/java/java_string_field_lite.cc",
    "protobuf/src/google/protobuf/compiler/js/js_generator.cc",
    "protobuf/src/google/protobuf/compiler/js/well_known_types_embed.cc",
    "protobuf/src/google/protobuf/compiler/objectivec/objectivec_enum.cc",
    "protobuf/src/google/protobuf/compiler/objectivec/objectivec_enum_field.cc",
    "protobuf/src/google/protobuf/compiler/objectivec/objectivec_extension.cc",
    "protobuf/src/google/protobuf/compiler/objectivec/objectivec_field.cc",
    "protobuf/src/google/protobuf/compiler/objectivec/objectivec_file.cc",
    "protobuf/src/google/protobuf/compiler/objectivec/objectivec_generator.cc",
    "protobuf/src/google/protobuf/compiler/objectivec/objectivec_helpers.cc",
    "protobuf/src/google/protobuf/compiler/objectivec/objectivec_map_field.cc",
    "protobuf/src/google/protobuf/compiler/objectivec/objectivec_message.cc",
    "protobuf/src/google/protobuf/compiler/objectivec/objectivec_message_field.cc",
    "protobuf/src/google/protobuf/compiler/objectivec/objectivec_oneof.cc",
    "protobuf/src/google/protobuf/compiler/objectivec/objectivec_primitive_field.cc",
    "protobuf/src/google/protobuf/compiler/php/php_generator.cc",
    "protobuf/src/google/protobuf/compiler/plugin.cc",
    "protobuf/src/google/protobuf/compiler/plugin.pb.cc",
    "protobuf/src/google/protobuf/compiler/python/python_generator.cc",
    "protobuf/src/google/protobuf/compiler/ruby/ruby_generator.cc",
    "protobuf/src/google/protobuf/compiler/subprocess.cc",
    "protobuf/src/google/protobuf/compiler/zip_writer.cc",
  ]

  configs += [ ":libprotobuf_private" ]
  public_deps = [ ":libprotobuf" ]

}

executable("protoc") {
  sources = [ "protobuf/src/google/protobuf/compiler/main.cc" ]

  configs += [ ":libprotobuf_private" ]
  deps = [ ":libprotoc" ]
}
