import("//build/pkg_config.gni")

declare_args() {
  # Compile and link the vendored GLFW source instead of the system library.
  use_bundled_glfw = true

  # Compile and link the vendored JsonCpp source instead of the system library.
  use_bundled_jsoncpp = true
}

config("glad_public") {
  include_dirs = [
    "glad/include"
  ]
}

source_set("glad") {
  sources = [
    "glad/src/glad.c"
  ]
  
  public_configs = [ ":glad_public" ]
}

config("imgui_public") {
  include_dirs = [
    "imgui",
    "imgui/examples",
    "imgui/misc/cpp",
  ]
}

source_set("imgui") {
  sources = [
    "imgui/imgui.cpp",
    "imgui/imgui_demo.cpp",
    "imgui/imgui_draw.cpp",
    "imgui/imgui_widgets.cpp",
    "imgui/examples/imgui_impl_glfw.cpp",
    "imgui/examples/imgui_impl_opengl3.cpp",
    "imgui/misc/cpp/imgui_stdlib.cpp",
  ]

  cflags = [ "-DIMGUI_IMPL_OPENGL_LOADER_GLAD" ]

  public_configs = [ ":imgui_public" ]
  public_deps = [":glad" ]
  deps = [
    ":glfw",
  ]
}

if (use_bundled_glfw) {
  config("glfw_public") {
    include_dirs = [ "glfw/include" ]

    if (is_win) {
      defines = [ "_GLFW_WIN32" ]
    }

    if (is_linux) {
      defines = [ "_GLFW_X11" ]
    }
  }

  source_set("glfw") {
    sources = [
      "glfw/src/context.c",
      "glfw/src/init.c",
      "glfw/src/input.c",
      "glfw/src/monitor.c",
      "glfw/src/vulkan.c",
      "glfw/src/window.c",
    ]

    if (is_win) {
      sources += [
        "glfw/src/win32_init.c",
        "glfw/src/win32_joystick.c",
        "glfw/src/win32_monitor.c",
        "glfw/src/win32_time.c",
        "glfw/src/win32_thread.c",
        "glfw/src/win32_window.c",
        "glfw/src/wgl_context.c",
        "glfw/src/egl_context.c",
        "glfw/src/osmesa_context.c",
      ]
    } else if (is_linux) {
      sources += [
        "glfw/src/x11_init.c",
        "glfw/src/x11_monitor.c",
        "glfw/src/x11_window.c",
        "glfw/src/xkb_unicode.c",
        "glfw/src/posix_time.c",
        "glfw/src/posix_thread.c",
        "glfw/src/glx_context.c",
        "glfw/src/egl_context.c",
        "glfw/src/osmesa_context.c",
        "glfw/src/linux_joystick.c",
      ]

      libs += [
        "rt",
        "dl",
        "X11",
        "Xcursor",
        "Xinerama",
        "Xrandr",
      ]
    }

    cflags = []
    if (is_win) {
      cflags += [
        "-D_CRT_SECURE_NO_WARNINGS",
        "/wd4152",
      ]
    } else {
      cflags += [
        "-Wno-sign-compare",
        "-Wno-missing-field-initializers",
      ]
    }

    include_dirs = [ "include", "src" ]
    public_configs = [ ":glfw_public" ]
  }
} else {
  pkg_config_lib("glfw") {
    pkg = "glfw3"
  }
}

if (use_bundled_jsoncpp) {
  config("jsoncpp_public") {
    include_dirs = [ "jsoncpp/include" ]
  }

  source_set("jsoncpp") {
    sources = [
      "jsoncpp/src/lib_json/json_reader.cpp",
      "jsoncpp/src/lib_json/json_value.cpp",
      "jsoncpp/src/lib_json/json_writer.cpp",
    ]

    cflags = [ "-Wno-deprecated-declarations" ]
    public_configs = [ ":jsoncpp_public" ]
  }
} else {
  pkg_config_lib("jsoncpp") {
    pkg = "jsoncpp"
  }
}
